{"version":3,"file":"static/js/860.48203dd9.chunk.js","mappings":"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","sources":["components/ContactList/ContactItem/ContactItem.styled.ts","components/ContactList/ContactItem/ContactItem.tsx","components/ContactList/ContactList.styled.ts","components/ContactList/ContactList.tsx","components/Notification/Notification.styled.ts","components/Notification/Notification.tsx","redux/contacts/contactsSelectors.ts"],"sourcesContent":["import { Box, Button, Avatar, styled } from '@mui/material';\n\nexport const StyledWrap = styled(Box)`\ndisplay: flex;\ngap: ${p=>p.theme.spacing(2)};\nalign-items: center;\nflex-wrap: nowrap;\n`;\n\nexport const StyledAvatar = styled(Avatar)`\nbackground-color: ${p=>p.theme.palette.text.secondary};\n`;\n\nexport const StyledButton = styled(Button)`\nborder-color: ${p=>p.theme.palette.primary.main};\nbackground-color: ${p=>p.theme.palette.primary.main};\ncolor: ${p=>p.theme.palette.text.primary};\nwidth: 100%;\n\n:hover, :focus {\n    background-color: ${p=>p.theme.palette.secondary.main};\n    color: ${p=>p.theme.palette.common.white};\n    border-color: ${p=>p.theme.palette.common.white};\n    font-weight: 600;\n    };\n`;","import { LocalPhone } from '@mui/icons-material';\nimport { Grid, Typography } from '@mui/material';\nimport { useAppDispatch } from 'hooks/hooksConfig';\n\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { ContactType } from 'types/types';\n\nimport { StyledWrap, StyledAvatar, StyledButton } from './ContactItem.styled';\n\ntype PropType = {item: ContactType}\n\nconst ContactItem: React.FC<PropType> = ({item}) => {\n  const {name, number, id} = item;\n  const dispatch = useAppDispatch();\n  const OnDeleteHandle = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <Grid container spacing={1} sx={{ alignItems: 'center' }}>\n        <Grid item xs={5}>\n          <StyledWrap>\n            <StyledAvatar>{name ? name[0].toUpperCase() : ';)'}</StyledAvatar>\n            <Typography variant=\"body1\">{name}</Typography>\n          </StyledWrap>\n        </Grid>\n        <Grid item xs={5}>\n          <StyledWrap>\n            <LocalPhone />\n            <Typography variant=\"subtitle1\">{number}</Typography>\n          </StyledWrap>\n        </Grid>\n        <Grid item xs={2}>\n          <StyledButton type=\"button\" onClick={OnDeleteHandle}>\n            Delete\n          </StyledButton>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default ContactItem;\n","import { List, ListItem, styled } from \"@mui/material\";\n\nexport const StyledList = styled(List)`\ndisplay: flex;\n gap: ${p=>p.theme.spacing(3)};\n flex-direction: column;\n`;\n\nexport const StyledListItem = styled(ListItem)`\n          display: flex;\n          gap: 16px;\n          flex-basis: 49%;\n          align-items: center;\n          justify-content: space-between;\n          padding: ${p=>p.theme.spacing(3)};\n          border-radius: ${p=>p.theme.spacing(3)};\n          background-color: ${p=>p.theme.palette.background.default};\n          `;","import { useSelector } from 'react-redux';\nimport { LinearProgress } from '@mui/material';\n\nimport ContactItem from './ContactItem';\nimport Notification from 'components/Notification';\n\nimport {\n  selectContactsFilter,\n  selectContactsIsLoading,\n  selectFilteredContacts,\n} from 'redux/contacts/contactsSelectors';\n\nimport { StyledList, StyledListItem } from './ContactList.styled';\n\nconst ContactList: React.FC = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const contactsFilter = useSelector(selectContactsFilter);\n  const isLoading = useSelector(selectContactsIsLoading);\n\n  return (\n    <>\n      {isLoading && <LinearProgress color=\"secondary\" />}\n      <StyledList dense={false}>\n        {contacts?.length > 0 ? (\n          contacts.map((item) => (\n            <StyledListItem key={item.id}>\n              <ContactItem item={item} />\n            </StyledListItem>\n          ))\n        ) : (\n          <Notification\n            message={\n              contactsFilter ? 'No matches found' : 'Add your first contacts'\n            }\n          />\n        )}\n      </StyledList>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { Typography, styled } from '@mui/material';\n\nexport const StyledMessage = styled(Typography)`\n   display: block;\n    text-align: center;\n    margin: 0 auto ${p => p.theme.spacing(4)};\n    color: ${p => p.children ? 'red' : p.theme.palette.text.primary};\n`;\n\n","import { StyledMessage } from './Notification.styled';\n\ntype PropsType = {\n  message: string,\n  error?: boolean,\n};\n\nconst Notification: React.FC<PropsType> = ({ message }) => {\n  return <StyledMessage as={\"p\"}>{message}</StyledMessage>;\n};\n\nexport default Notification;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'redux/store';\n\nexport const selectContacts = (state: RootState) => state.contacts.items;\n\nexport const selectContactsIsLoading = (state: RootState) => state.contacts.isLoading;\n\nexport const selectContactsFilter = (state: RootState) => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n    [selectContacts, selectContactsFilter], (contacts, contactsFilter) => {\n        const filteredContacts = contacts?.filter(({ name }) =>\n            name.toLowerCase().includes(contactsFilter.toLowerCase())\n        );\n\n        return filteredContacts;\n    }\n);"],"names":["StyledWrap","styled","Box","p","theme","spacing","StyledAvatar","Avatar","palette","text","secondary","StyledButton","Button","primary","main","common","white","item","name","number","id","dispatch","useAppDispatch","Grid","container","sx","alignItems","xs","toUpperCase","Typography","variant","LocalPhone","type","onClick","deleteContact","StyledList","List","StyledListItem","ListItem","background","default","contacts","useSelector","selectFilteredContacts","contactsFilter","selectContactsFilter","isLoading","selectContactsIsLoading","LinearProgress","color","dense","length","map","Notification","message","StyledMessage","children","as","selectContacts","state","items","filter","createSelector","toLowerCase","includes"],"sourceRoot":""}